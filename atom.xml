<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://childlike2333.github.io</id>
    <title>Childlike</title>
    <updated>2020-03-18T14:47:30.828Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://childlike2333.github.io"/>
    <link rel="self" href="https://childlike2333.github.io/atom.xml"/>
    <subtitle>不忘初心 方得始终</subtitle>
    <logo>https://childlike2333.github.io/images/avatar.png</logo>
    <icon>https://childlike2333.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Childlike</rights>
    <entry>
        <title type="html"><![CDATA[HTTP协议基础知识]]></title>
        <id>https://childlike2333.github.io/post/http-xie-yi-ji-chu-zhi-shi/</id>
        <link href="https://childlike2333.github.io/post/http-xie-yi-ji-chu-zhi-shi/">
        </link>
        <updated>2020-03-18T14:46:47.000Z</updated>
        <content type="html"><![CDATA[<h4 id="http协议-超文本传输协议-基于tcpip通讯协议来传递数据">HTTP协议 超文本传输协议 基于TCP/IP通讯协议来传递数据</h4>
<p>主要特点：</p>
<ol>
<li>
<p>简单快速</p>
</li>
<li>
<p>灵活</p>
</li>
<li>
<p>无连接</p>
</li>
<li>
<p>无状态</p>
</li>
<li>
<p>支持B/S及C/S模式</p>
</li>
</ol>
<h4 id="url-统一资源定位符">URL 统一资源定位符</h4>
<blockquote>
<p>http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</p>
</blockquote>
<ol>
<li>
<p>http: 协议名称</p>
</li>
<li>
<p>www.aspxfans.com     域名部分</p>
</li>
<li>
<p>8080     端口部分</p>
</li>
<li>
<p>/news/     虚拟目录部分</p>
</li>
<li>
<p>index.asp     文件名部分</p>
</li>
<li>
<p>#到最后     锚部分</p>
</li>
<li>
<p>？到#中间的部分     参数部分</p>
</li>
</ol>
<h4 id="http-请求消息request格式包括">HTTP 请求消息Request，格式包括</h4>
<ol>
<li>
<p>请求行     请求类型，访问的资源及HTTP版本（不同请求区别在与请求行的 GET/POST请求头）</p>
</li>
<li>
<p>请求头部     说明服务器要使用的附加信息，浏览器相关的内容，由浏览器来自己定义</p>
</li>
<li>
<p>空行     请求头部后面的空行是必须的</p>
</li>
<li>
<p>请求数据     请求数据如name=多少 id等于多少等等</p>
</li>
</ol>
<pre><code>GET /562f25980001b1b106000338.jpg HTTP/1.1
Host    img.mukewang.com
User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
Accept    image/webp,image/*,*/*;q=0.8
Referer    http://www.imooc.com/
Accept-Encoding    gzip, deflate, sdch
Accept-Language    zh-CN,zh;q=0.8、
</code></pre>
<h4 id="http响应消息response格式包括">HTTP响应消息Response,格式包括</h4>
<ol>
<li>
<p>状态行，由HTTP协议版本号、状态码、状态消息组成</p>
</li>
<li>
<p>消息报头，用来说明客户端要使用的一些附加信息</p>
</li>
<li>
<p>空行</p>
</li>
<li>
<p>响应正文，服务器返回给客户端的文本信息</p>
</li>
</ol>
<p>HTTP/1.1 200 OK<br>
Date: Fri, 22 May 2009 06:07:21 GMT<br>
Content-Type: text/html; charset=UTF-8</p>
<pre><code>&lt;html&gt;
      &lt;head&gt;&lt;/head&gt;
      &lt;body&gt;
            &lt;!--body goes here--&gt;
      &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="http之状态码三位数字组成第一个数字定义响应的类别">HTTP之状态码：三位数字组成，第一个数字定义响应的类别</h4>
<p>1xx：指示信息--表示请求已经接受，继续处理</p>
<p>2xx：成功，表示请求已被成功接收、理解、接受</p>
<p>3xx:  重定向，要完成请求必须进行更进一步的操作</p>
<p>4xx: 客户端错误，请求有语法错误或请求无法实现</p>
<p>5xx:  服务器端错误，服务器未能实现合法的请求</p>
<h4 id="常见状态码">常见状态码</h4>
<p>200 OK     客户端请求成功</p>
<p>400 Bad Request     客户端请求有语法错误，不能被服务器所理解</p>
<p>403 Forbidden     服务器收到请求，但是拒绝提供服务</p>
<p>404 Not Found     请求资源不存在，输入了错误的URL</p>
<p>500 Internal Server Error     服务器发生了不可预期的错误</p>
<p>503 Server Unavailable     服务器当前不能处理客服端的请求，一段时间后可能恢复正常</p>
<h4 id="http请求方法">HTTP请求方法：</h4>
<p>1.0定义了三种请求方法：</p>
<p>GET：请求指定的页面信息，并返回实体主体</p>
<p>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）</p>
<p>HEAD：类似get请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
<h4 id="http工作原理">HTTP工作原理：</h4>
<p>工作步骤：</p>
<ol>
<li>
<p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口，建立一个TCP套接字连接</p>
</li>
<li>
<p>发送HTTP请求，即上面的上面的request等</p>
</li>
<li>
<p>服务器接受请求并返回HTTP响应，Web服务器解析请求，定位请求资源，即response</p>
</li>
<li>
<p>释放连接TCP</p>
</li>
<li>
<p>客户端解析服务器返回的HTML内容</p>
</li>
</ol>
<h4 id="浏览器输入url按下回车之后会经历以下流程">浏览器输入URL，按下回车之后会经历以下流程：</h4>
<ol>
<li>
<p>浏览器像DNS服务器请求解析该URL中的域名所对应的IP地址</p>
</li>
<li>
<p>解析IP地址后，根据ip地址和端口，和服务器建立TCP连接</p>
</li>
<li>
<p>浏览器发出读取文件的HTTP请求，改请求报文作为TCP三次握手的第三个报文的数据发给服务器；</p>
</li>
<li>
<p>服务器对浏览器请求做出响应，并把对应的html文本发送给浏览器；</p>
</li>
<li>
<p>释放TCP连接</p>
</li>
<li>
<p>浏览器将该html文本并显示内容</p>
</li>
</ol>
<h4 id="get-post的区别">GET、POST的区别</h4>
<ol>
<li>
<p>GET会将参数附加到地址上，而POST请求不会</p>
</li>
<li>
<p>浏览器和服务器对URL长度一般来说会有限制，所以采用GET方法提交的时候，传输数据就会受到URL长度的限制。</p>
</li>
<li>
<p>POST的安全性要比GET的安全性高，通过GET提交数据，数据会明文显示在URL上</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx代理配置https源站并支持quic协议]]></title>
        <id>https://childlike2333.github.io/post/nginx-dai-li-pei-zhi-https-yuan-zhan-bing-zhi-chi-quic-xie-yi/</id>
        <link href="https://childlike2333.github.io/post/nginx-dai-li-pei-zhi-https-yuan-zhan-bing-zhi-chi-quic-xie-yi/">
        </link>
        <updated>2020-03-18T14:46:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>events {
    worker_connections  1024;
}

http {
    include mime.types; 
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

server {
            listen       443 ssl;
            add_header alt-svc 'quic=&quot;:443&quot;; ma=2592000; v=&quot;44,43,39&quot;';
            server_name  wangsu.tplat.top;
            ssl_certificate    2551488_wangsu.tplat.top.pem;
            ssl_certificate_key  2551488_wangsu.tplat.top.key;
            ssl_session_cache    shared:SSL:1m;
            ssl_session_timeout  5m;
            ssl_ciphers  HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers  on;
            error_page   500 502 503 504  /50x.html;
            location / {
                proxy_pass  http://10.8.210.30:61030;
            }
            location /static/ {
                alias  /home/TPlat/TPlat/static/;
            }
        }

server {
    listen 80;
    server_name wangsu.tplat.top;
      location / {
                proxy_pass  http://10.8.210.30:61030;
            }
     }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FQA——Tools]]></title>
        <id>https://childlike2333.github.io/post/fqa-tools/</id>
        <link href="https://childlike2333.github.io/post/fqa-tools/">
        </link>
        <updated>2020-03-18T14:37:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="eclipse关联git插件">eclipse关联git插件</h3>
<ol>
<li>首先windows电脑已经安装了git插件</li>
<li>在外面找一个文件夹git一份代码</li>
<li>然后在eclipse中新建一个 robot-framework项目</li>
<li>右键项目-选 team小组-共享项目-在弹出框中选git</li>
<li>弹出框中的 repository 点击create，选择刚才在外面git代码的路径，完成即可</li>
</ol>
<h3 id="eclipse导入一个git的django项目">eclipse导入一个git的django项目</h3>
<ol>
<li>在项目路径 右键导入 选择git project from git</li>
<li>选择clone url</li>
<li>填入路径、账号密码等信息，作为一个普通项目导入</li>
<li>右键项目，pydev-设置这个项目为 python项目 django项目 并作为源路径使用</li>
<li>右键项目，属性, pydev/django，设置TPlat/manage.py,设置manage路径就可以使用django跑服务</li>
</ol>
<h3 id="eclipse微软雅黑consolas字体设置">eclipse微软雅黑+Consolas字体设置</h3>
<ul>
<li>下载两种字体混合语言包，复制到c:/windows/fonts</li>
<li>首选项-外观-颜色和字体-文本字体 选择字体为yahei consolas</li>
</ul>
<h3 id="eclipse设置所有txt文件用utf-8编码打开">eclipse设置所有txt文件用utf-8编码打开</h3>
<p>首选项-常规-工作空间，设置文本默认打开编码（兼容远程模式）</p>
<h3 id="eclipse配置git插件">eclipse配置git插件</h3>
<ol>
<li>安装git插件 Help - Install New Software - 点击Add添加。 软件名字：egit   http://download.eclipse.org/egit/updates</li>
<li>勾选 全部. 点击Next. 继续等待，这个时间会比较久，请耐心等待。新的页面出来之后，选择install 安装</li>
</ol>
<h3 id="eclipse配置robot插件">eclipse配置robot插件</h3>
<ol>
<li>Help - Install New Software - 点击Add添加。 RED地址：http://master.dl.sourceforge.net/project/red-robot-editor/repository点击OK之后，名字加个robot吧。等待</li>
<li>勾选 Robot Framework IDE. 点击Next. 继续等待，这个时间会比较久，请耐心等待。新的页面出来之后，选择install 安装。</li>
<li>安装完成之后，开始配置RF标识，关键字，变量的自动补全。 windows - preference - RobotFramework - Editor - Content Assitant 加上如下内容： .abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$@&amp;*:</li>
</ol>
<h3 id="git拉取远程分支">git拉取远程分支</h3>
<ol>
<li>找一个目录用来拉取</li>
<li>git init   初始化一下</li>
<li>git remote add origin git@gitlab:root/wscaddytest.git   与远程仓库建立连接</li>
<li>git pull origin dev_yuzt     拉取分支</li>
</ol>
<h3 id="securecrt标签显示主机名">secureCRT标签显示主机名</h3>
<p>secureCRT标签显示主机名：<br>
把option中的Enable keypad mode switching这一项不要打钩即可</p>
<h3 id="windows后台运行bat">Windows后台运行bat</h3>
<pre><code>@echo off 　　
　　if &quot;%1&quot; == &quot;h&quot; goto begin 
　　    mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit 
　　:begin
</code></pre>
<h3 id="windows命令行返回字符编码异常">Windows命令行返回字符编码异常</h3>
<p>windows cmd返回数据，print报错，字符编码问题：<br>
windows cmd编码如果为gbk	 python解析时要 f.read().decode('gbk')<br>
windows命令行执行命令的返回时要检索，str.find 也要转成gbk，不然rf会报错</p>
<h3 id="windows查看路由">Windows查看路由</h3>
<p>route print<br>
显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface<br>
tracert -参数 ip(或计算机名)<br>
跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p>
<h3 id="只单独调整win10字体大小的方法">只单独调整win10字体大小的方法</h3>
<ul>
<li>单击Windows开始菜单，在搜索框中输入“regedit”，在点击搜索结果的“regedit运行命令”，就会打开注册表</li>
<li>按路径依次点开文件夹，找到WindowMetrics，路径为\HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics</li>
<li>在右侧找到IconFont，双击或右键修改，注意，只修改0000和0010后面的值。Windows默认的字体大小为9号，改为12号最合适。CaptionFont活动、非活动窗口字体； IconFont图标字体；   MessageFont消息框字体；SmCaptionFont调色板标题字体 ，双击那个区域，修改</li>
</ul>
<h3 id="如何用git添加eclipse的robot项目">如何用git添加eclipse的robot项目</h3>
<ul>
<li>右键根目录-导入-复制项目的地址 配置完成</li>
<li>导入来日文件夹或者归档文件的项目，层级选深入一级</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FQA——Python]]></title>
        <id>https://childlike2333.github.io/post/fqa-python/</id>
        <link href="https://childlike2333.github.io/post/fqa-python/">
        </link>
        <updated>2020-03-18T14:32:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="django-gunicorn配置使用">Django-gunicorn配置使用</h3>
<ul>
<li>安装</li>
</ul>
<p>pip install gunicorn</p>
<p>在项目的setting注册应用  gunicorn</p>
<p>在manage.py所在目录下：</p>
<p>gunicorn TPlat.wsgi:application -b 10.8.210.30:61030</p>
<p>-b 指定运行ip及端口</p>
<p>--workers 8  启用8个线程来运行程序，一般看CPU的核数</p>
<p>--worker-class gevent  使用gevent异步工作模式来运行程序</p>
<p>使用前需要安装 pip install gevent</p>
<p>静态文件加载问题：<br>
在TPlat/urls.py中加入,注意位置</p>
<pre><code class="language-python">from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns = [
     url('^admin/', admin.site.urls),
]
urlpatterns += staticfiles_urlpatterns()
</code></pre>
<h3 id="layui弹出层下拉框遮挡问题">Layui弹出层，下拉框遮挡问题</h3>
<p>弹出层，会使用到layui-layer-content，在新增、修改按钮，弹出弹出层后，设置layui-layer-content的一个属性为</p>
<pre><code>$('#edit_ip').parent().attr('style','overflow:visible !important');
</code></pre>
<h3 id="linux多线程连接数据库时抛出异常">linux多线程连接数据库时抛出异常</h3>
<p>在linux下，多线程去连接数据库时会异常（windows下不会有这种情况）2006 mysql server has gone away<br>
需要先关闭旧的数据库连接</p>
<p><code>from django.db import close_old_connections</code></p>
<p>然后在进程开始后的第一句中,将旧的数据库连接关闭</p>
<p><code>close_old_connections()</code></p>
<h3 id="rf无法执行用例">RF无法执行用例</h3>
<p>在C:\Python27\Scripts 目录下建立一个pybot.bat<br>
@Echo off<br>
python -m robot.run %*</p>
<h3 id="rf无法获取w10管理员执行权限">RF无法获取w10管理员执行权限</h3>
<p>建立一个runrobot.bat,然后以管理员权限运行这个bat<br>
python C:\Python27\Scripts\ride.py</p>
<h3 id="robot命令执行优化">robot命令执行优化</h3>
<p>指定报告标题，运行整个目录下的suites<br>
robot --logtitle TestReport --reporttitle TestReport suites [目录]</p>
<h3 id="robot字典取值">robot字典取值</h3>
<p>&amp;{log_dict}[pid]    中间不需要加引号</p>
<h3 id="robot执行时编码异常">robot执行时编码异常</h3>
<p>reload(sys)<br>
sys.setdefaultencoding('utf8')</p>
<h3 id="str和unicode字符转换">str和unicode字符转换</h3>
<p>python str 和 unicode字符转换：<br>
unicode转化为str，采用encode 编码：<br>
str = u.encode('gbk')<br>
str转化为unicode ，采用decode 解码：<br>
unicode = s.decode('gbk')</p>
<h3 id="创建有顺序的字典">创建有顺序的字典</h3>
<pre><code class="language-python">import collections
dic = collections.OrderedDict()
</code></pre>
<h3 id="前端导出excel失败">前端导出excel失败</h3>
<p>因为ajax无法直接接收文件流</p>
<pre><code class="language-html">window.open('/export_excel/')
</code></pre>
<h3 id="获取当前路径">获取当前路径</h3>
<pre><code class="language-python">#获取当前路径
os.getcwd()
#组合路径
os.path.join(os.getcwd(),'lib','action_event.yaml')  
</code></pre>
<h3 id="linux在另一个进程中使用models">linux在另一个进程中使用models</h3>
<p>linux要在另一个进程中使用models 需要在文件的最前面导入这些：<br>
import django<br>
import os</p>
<p>os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;TPlat.settings&quot;)<br>
django.setup()</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络抓包工具]]></title>
        <id>https://childlike2333.github.io/post/wang-luo-zhua-bao-gong-ju/</id>
        <link href="https://childlike2333.github.io/post/wang-luo-zhua-bao-gong-ju/">
        </link>
        <updated>2020-03-18T14:20:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="tcpdump抓包">tcpdump抓包</h1>
<p>tcpdump -i eth1 host 192.168.1.1	抓取所有经过eth1，目的或源地址是 192.168.1.1的数据<br>
tcpdump -i eth1 src host 192.168.1.1	源地址<br>
tcpdump -i eth1 dst host 192.168.1.1	目的地址</p>
<p>tcpdump -i eth1 port 25		抓取所有经过eth1，目的或源端口是25的网络数据<br>
tcpdump -i eth1 src port 25		源端口<br>
tcpdump -i eth1 dst port 25		目的端口</p>
<p>tcpdump -i eth1 net 192.168		ip过滤<br>
tcpdump -i eth1 arp		过滤arp协议<br>
tcpdump -i eth1 ip			过滤ip<br>
tcpdump -i eth1 tcp<br>
tcpdump -i eth1 udp<br>
tcpdump -i eth1 icmp</p>
<p>非 : ! or &quot;not&quot; (去掉双引号)<br>
且 : &amp;&amp; or &quot;and&quot;<br>
或 : || or &quot;or&quot;</p>
<ul>
<li>抓取所有经过 eth1，目的地址是 192.168.1.254 或 192.168.1.200 端口是 80 的 TCP 数据<br>
tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))</li>
<li>抓取所有经过 eth1，目标 MAC 地址是 00:01:02:03:04:05 的 ICMP 数据<br>
tcpdump -i eth1 '((icmp) and ((ether dst host 00:01:02:03:04:05)))</li>
<li>抓取所有经过 eth1，目的网络是 192.168，但目的主机不是 192.168.1.200 的 TCP 数据<br>
tcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))</li>
<li>只抓 SYN 包<br>
tcpdump -i eth1 'tcp[tcpflags] = tcp-syn'</li>
<li>抓 SYN, ACK<br>
tcpdump -i eth1 'tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0'</li>
<li>抓 SMTP 数据<br>
tcpdump -i eth1 '((port 25) and (tcp[(tcp[12]&gt;&gt;2):4] = 0x4d41494c))'</li>
<li>抓取数据区开始为&quot;MAIL&quot;的包，&quot;MAIL&quot;的十六进制为 0x4d41494c。</li>
<li>抓 HTTP GET 数据</li>
<li>tcpdump -i eth1 'tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420'<br>
&quot;GET &quot;的十六进制是 47455420</li>
</ul>
<h2 id="抓-ssh-返回">抓 SSH 返回</h2>
<p>tcpdump -i eth1 'tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D'<br>
&quot;SSH-&quot;的十六进制是 0x5353482D</p>
<p>tcpdump -i eth1 '(tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D) and (tcp[((tcp[12]&gt;&gt;2)+4):2]<br>
0x312E)'抓老版本的 SSH 返回信息，如&quot;SSH-1.99..&quot;</p>
<p>抓 DNS 请求数据<br>
tcpdump -i eth1 udp dst port 53</p>
<h2 id="其他">其他</h2>
<p>-c 参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工 CTRL+C 还是<br>
抓的太多，于是可以用-c 参数指定抓多少个包。<br>
time tcpdump -nn -i eth0 'tcp[tcpflags] = tcp-syn' -c 10000 &gt; /dev/null<br>
上面的命令计算抓 10000 个 SYN 包花费多少时间，可以判断访问量大概是多少。</p>
<p>实时抓取端口号8000的GET包，然后写入GET.log</p>
<p>tcpdump -i eth0 '((port 8000) and (tcp[(tcp[12]&gt;&gt;2):4]=0x47455420))' -nnAl -w /tmp/GET.log</p>
<h1 id="wireshark抓包">wireshark抓包</h1>
<ul>
<li>协议过滤<br>
比如TCP，只显示TCP协议。</li>
<li>IP 过滤<br>
比如 ip.src <mark>192.168.1.102 显示源地址为192.168.1.102，<br>
ip.dst</mark>192.168.1.102, 目标地址为192.168.1.102</li>
<li>端口过滤<br>
tcp.port ==80, 端口为80的<br>
tcp.srcport == 80, 只显示TCP协议的愿端口为80的。</li>
<li>Http模式过滤<br>
http.request.method==&quot;GET&quot;, 只显示HTTP GET方法的。</li>
<li>逻辑运算符为 AND/ OR</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shell基础知识]]></title>
        <id>https://childlike2333.github.io/post/shell-ji-chu-zhi-shi/</id>
        <link href="https://childlike2333.github.io/post/shell-ji-chu-zhi-shi/">
        </link>
        <updated>2020-03-18T14:20:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="grep">grep</h2>
<p>--color=auto 或者 --color	表示对匹配到的文本着色显示<br>
-i	在搜索时忽略大小写<br>
-n	显示结果所在行号<br>
-c	统计匹配到的行数，注意，是匹配到的总行数，不是匹配的次数<br>
-o	只显示符合条件的字符串，但是不整行显示，每个符合条件的字符串单独显示一行<br>
-v	输出不带关键字的行<br>
-w	匹配整个单词，如果是字符串中包含这个单词，则不做匹配<br>
-Ax	在输出的时候包含结果所在行之后的指定行数，这里指之后的x行 after<br>
-Bx	在输出的时候包含结果所在行之前的指定行数，这里指之前的x行 before<br>
-Cx	在输出的时候包含结果所在行之前和之后的指定行数，这里指之前和之后的x行，context<br>
-e	实现多个选项的匹配，逻辑or关系<br>
-q	静默匹配，不输出任何信息，当我们需要知道时候匹配到内容是，echo $?，输出0表示匹配到1表示没有匹配到<br>
-P	表示使用兼容的perl的正则引擎</p>
<h2 id="sed">sed</h2>
<p>sed -n '3p' data		p 只打印第三行<br>
sed -n '100,200p' data 	p 只打印100到200行<br>
sed '2,5d' data		d 删除第2到第5行<br>
sed '/My/,/You/d' data	d 删除包含‘My’的行到包含‘You’的行之间的行<br>
sed '/My/,10d data		d 删除包含‘my‘的行到第十行的内容<br>
sed '/my/p' data		p 先打印所有，再打印匹配到的行<br>
sed -n '/my/p' data		p 取消sed的默认打印，只打印匹配到的行<br>
sed '$d' data		d 删除最后一行<br>
sed '/my/d' data		d 删除包含my的行<br>
sed 's/My/You/g' data	s 替换 g表示全局替换，替换My为You<br>
sed -e '1,10d' -e 's/My/Your/g' data	多个命令用-e隔开<br>
sed '/My/r introduce.txt' data	r 读取 如果在文件data的某一行匹配到My,就在该行后面插入文件txt的内容<br>
sed -n '/My/w me.txt' data	w 写入 如果在文件data的某一行匹配到My，就将这行写入到txt文件中<br>
sed '/My'/a\</p>
<blockquote>
<p>hello' data	a 追加，在匹配到的行后面追加hello<br>
sed '/My'/i<br>
hello' data	i 插入，在匹配到的行前面追加hello<br>
sed '3c<br>
hello' data	c 修改，在将匹配的行内容更改成hello<br>
sed 'y/abC/ABc'	y 把所有小写的a转换成A，小写的b转换成B，大写的C转换成c</p>
</blockquote>
<h2 id="awk">awk</h2>
<p>awk -v FS='#' -v OFS='---' '{print $1,$2}' test	用#分隔字符，用---打印字符<br>
内置变量：<br>
FS	输入字段分隔符，默认为空白字符<br>
OFS	输出字段分隔符，默认为空白字符<br>
RS	输入记录分隔符，指定输入时的换行符<br>
ORS	输出记录分隔符，输出时用指定符号替换换行符<br>
NF	当前行的字段的个数，字段数量<br>
NR	当前处理的文本号的行号<br>
FNR	各文件分别计数的行号<br>
FILENAME	当前文件名<br>
ARGC	命令行参数的个数<br>
ARGV	数组，保存的是命令行所给定的各参数</p>
<p>awk 'NR<mark>5 {print $0}' test	打印第五行的内容<br>
x &lt; y	小于<br>
x&lt;=y	小于等于<br>
x</mark>y	等于<br>
x!=y	不等于<br>
x&gt;=y	大等于<br>
x&gt;y	大于<br>
x ~ /正则/	正则匹配正确<br>
x! ~ /正则/	正则匹配不正确<br>
--re-interval  /  --posix	拓展正则匹配</p>
<p>awk '/a/,/b/ {print $0}' data	打印匹配到a的行和匹配到b的行，之间的行，行范围模式<br>
awk -F &quot;:&quot; '{ if($3 &lt; 500) {print $1,&quot;系统用户&quot;} else {print $1,&quot;普通用户&quot;}}' /etc/passwd<br>
小于500打印为系统用户，否则打印为普通用户</p>
<p>awk 'i=!i' data	打印奇数行<br>
awk '{ if(NR==2){next}; print $0}' data	不打印第二行的数据</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[QUIC协议基础知识]]></title>
        <id>https://childlike2333.github.io/post/quic-xie-yi-ji-chu-zhi-shi/</id>
        <link href="https://childlike2333.github.io/post/quic-xie-yi-ji-chu-zhi-shi/">
        </link>
        <updated>2020-03-18T14:20:01.000Z</updated>
        <content type="html"><![CDATA[<p>QUIC 全称 Quick UDP Internet Connection, 是谷歌公司制定的一种基于 UDP 协议的低时延互联网传输协议。</p>
<p>我们知道，TCP/IP 协议族是互联网的基础。其中传输层协议只有两种： TCP 和 UDP 协议。与 TCP 协议相比，UDP 更为轻量，但是错误校验也要少得多。由于 UDP 是不可靠协议，不保证按序送达，所以其可靠性比不上 TCP 协议。</p>
<p>QUIC 传输层基于 UDP 协议但却是一种可靠的传输协议，因为它将很多可靠性的验证策略从系统层转移到应用层来做，这样可以使用更适合现代流媒体传输的拥塞控制策略。</p>
<p>由于 TCP、UDP 协议是系统内核实现的，更新修改起来并不很方便，而 QUIC 是软件层面实现的，更新迭代起来非常方便。</p>
<p>UDP 本身是无序传输的，这在单个连接上并行传输多个数据有天生的优势：多个数据直接发送即可，由 QUIC 对收到的数据进行重新组合排序，然后送往上层应用。这中间不用等待各种数据确认包，效率非常高。</p>
<p>在建立 TCP 连接时，需要进行至少三次握手，如果要开启 TLS 加密，则还需要进行 TLS 握手。而 QUIC 采用了类似于 TCP Fast Open 的技术，如果之前连接过，那么之后可以不用重复握手而直接开始传送数据，以实现 0-RTT 往返时延。即便之前没有连接过，也可以在 1-RTT 内完成连接并开始传送数据。并且自身就拥有与 TLS 等效的加密措施。</p>
<p>在发生丢包时，TCP 会重传丢失的包。而 QUIC，则使用了一种非常神奇的前向纠错算法，通过连续的几个数据包的校验和，可以直接恢复出丢失的包内容，而不需要重传。</p>
<p>在移动端表现更好：用户的网络环境并不稳定，Wi-Fi、4G、3G、2G 之间来回变化，IP 一旦发生变化，TCP 的连接是不可能保持的。而 QUIC 就不存在这样的问题，通过 ID 来标识用户（而不是 IP + 端口），在连接切换后直接恢复之前的连接会话。</p>
<p>配合 HTTP/2 API 食用更佳：由于 HTTP/2 采用二进制帧传输机制，QUIC 直接使用这样的机制进行数据传输，效率更高<br>
QUIC 实现的目标，就是利用 UDP 实现一个 TCP，支持 TCP 的所有特性，并且比 TCP 更快更好用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端基础知识]]></title>
        <id>https://childlike2333.github.io/post/qian-duan-ji-chu-zhi-shi/</id>
        <link href="https://childlike2333.github.io/post/qian-duan-ji-chu-zhi-shi/">
        </link>
        <updated>2020-03-18T14:18:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="js基础知识">JS基础知识</h1>
<p>x=document.getElementById(&quot;demo&quot;)  //查找元素<br>
x.innerHTML=&quot;Hello JavaScript&quot;;    //改变内容</p>
<p>大小写敏感<br>
忽略空格</p>
<p>脚本语言，读取代码时，逐行执行脚本代码，传统编程时，执行前需要对全部代码进行编译</p>
<p>单行注释  //<br>
多行注释 /*    */</p>
<p>var a = 1.1 不带引号的  数字<br>
var str = &quot;hello world&quot; 带引号的 字符串<br>
var a = true 布尔<br>
var cats = new Array();<br>
cars[0]=&quot;Audi&quot;;<br>
cars[1]=&quot;BMW&quot;;<br>
cars[2]=&quot;Volvo&quot;; 基于下标</p>
<p>函数定义<br>
function functionname(){<br>
执行代码块<br>
}</p>
<ul>
<li>运算可以应用于字符串，数字与字符串相加，最后会变成字符串</li>
</ul>
<p>== 等于<br>
===  全等  （值和类型都等于）<br>
&amp;&amp; 与<br>
|| 或<br>
！ 非</p>
<p>if (条件 1)<br>
{<br>
当条件 1 为 true 时执行的代码<br>
}<br>
else if (条件 2)<br>
{<br>
当条件 2 为 true 时执行的代码<br>
}<br>
else<br>
{<br>
当条件 1 和 条件 2 都不为 true 时执行的代码<br>
}</p>
<p>switch(n)<br>
{<br>
case 1:<br>
执行代码块 1<br>
break;<br>
case 2:<br>
执行代码块 2<br>
break;<br>
default:<br>
n 与 case 1 和 case 2 不同时执行的代码<br>
}</p>
<p>for (var i=0; i&lt;5; i++)<br>
{<br>
x=x + &quot;The number is &quot; + i + &quot;<br>&quot;;<br>
}</p>
<p>while (条件)<br>
{<br>
需要执行的代码<br>
}</p>
<p>break 语句用于跳出循环<br>
continue 用于跳过循环中的一个迭代</p>
<p>try<br>
{<br>
//在这里运行代码<br>
}<br>
catch(err)<br>
{<br>
//在这里处理错误<br>
}</p>
<p>创建自定义错误<br>
throw exception</p>
<h1 id="jquery">JQuery</h1>
<h2 id="基础语法">基础语法</h2>
<p>$(selector).action()<br>
美元符号定义 jQuery<br>
选择符(selector)“查询’和”查找“HMTL元素<br>
jQuery的action()执行对元素的操作</p>
<p>$(&quot;#intor&quot;)	id为“intro”的元素<br>
jQuery是为处理HTML事件而特别设计的</p>
<h2 id="事件方法">事件方法</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>d</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>y</mi><mo>(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>)</mo><mi mathvariant="normal">将</mi><mi mathvariant="normal">函</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">绑</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">档</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">绪</mi><mi mathvariant="normal">事</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">档</mi><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">载</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">）</mi></mrow><annotation encoding="application/x-tex">(document).ready(function)	将函数绑定到文档的就绪事件（当文档完成加载时）
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">绑</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">档</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">绪</span><span class="mord cjk_fallback">事</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">档</span><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">载</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">）</span></span></span></span>(selector).click(function)		触发或将函数绑定到被选元素的点击事件<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>d</mi><mi>b</mi><mi>l</mi><mi>c</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi><mo>(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>)</mo><mi mathvariant="normal">触</mi><mi mathvariant="normal">发</mi><mi mathvariant="normal">或</mi><mi mathvariant="normal">将</mi><mi mathvariant="normal">函</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">绑</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">选</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">双</mi><mi mathvariant="normal">击</mi><mi mathvariant="normal">事</mi><mi mathvariant="normal">件</mi></mrow><annotation encoding="application/x-tex">(selector).dblclick(function)	触发或将函数绑定到被选元素的双击事件
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">触</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">绑</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">双</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">事</span><span class="mord cjk_fallback">件</span></span></span></span>(selector).focus(function)	触发或将函数绑定到被选元素的获得焦点事件<br>
$(selector).mouseover(function)	触发或将函数绑定到被选元素的鼠标悬停事件</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>h</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo>(</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">(selector).hide(speed,callback);	
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span></span></span></span>(selector).show(speed,callback);<br>
$(selector).toggle(speed,callback);<br>
隐藏/显示的切换，speed是切换速度，callback是切换结束后执行的函数</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>f</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>I</mi><mi>n</mi><mo>(</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">淡</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">已</mi><mi mathvariant="normal">隐</mi><mi mathvariant="normal">藏</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi></mrow><annotation encoding="application/x-tex">(selector).fadeIn(speed,callback);	淡入已隐藏的元素
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">淡</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">隐</span><span class="mord cjk_fallback">藏</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span></span></span></span>(selector).fadeOut(speed,callback);	淡出未隐藏的元素<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>f</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>T</mi><mi>o</mi><mi>g</mi><mi>g</mi><mi>l</mi><mi>e</mi><mo>(</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">淡</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">和</mi><mi mathvariant="normal">淡</mi><mi mathvariant="normal">出</mi><mi mathvariant="normal">之</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">切</mi><mi mathvariant="normal">换</mi></mrow><annotation encoding="application/x-tex">(selector).fadeToggle(speed,callback);	淡入和淡出之间的切换
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">淡</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">和</span><span class="mord cjk_fallback">淡</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">之</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">切</span><span class="mord cjk_fallback">换</span></span></span></span>(selector).fadeTo(speed,opacity,callback);	opacity不透明度，0-1之间，透明显示</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>s</mi><mi>l</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>D</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo>(</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">滑</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">已</mi><mi mathvariant="normal">隐</mi><mi mathvariant="normal">藏</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi></mrow><annotation encoding="application/x-tex">(selector).slideDown(speed,callback);	滑动已隐藏的元素
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">滑</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">隐</span><span class="mord cjk_fallback">藏</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span></span></span></span>(selector).slideUp(speed,callback);	滑出已隐藏的元素<br>
$(selector).slideToggle(speed,callback);	滑入和滑出之间切换</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>s</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>)</mo><mi mathvariant="normal">.</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>(</mo><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi></mrow><mo separator="true">,</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">自</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">义</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">画</mi><mi mathvariant="normal">必</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">的</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi><mi mathvariant="normal">参</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">义</mi><mi mathvariant="normal">形</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">画</mi><mi mathvariant="normal">的</mi><mi>C</mi><mi>S</mi><mi>S</mi><mi mathvariant="normal">属</mi><mi mathvariant="normal">性</mi></mrow><annotation encoding="application/x-tex">(selector).animate({params},speed,callback);	自定义动画
必需的 params 参数定义形成动画的 CSS 属性
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">画</span><span class="mord cjk_fallback">必</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">画</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span></span></span></span>(selector).stop(stopAll,goToEnd);<br>
stopAll	即停止活动的动画，允许任何排入队列的动画向后执行，默认为false<br>
goToEnd	是否立即完成当前动画，默认为false</p>
<h2 id="操作html内容和属性">操作HTML内容和属性</h2>
<p>text() - 设置或返回所选元素的文本内容<br>
html() - 设置或返回所选元素的内容（包括 HTML 标记）<br>
val() - 设置或返回表单字段的值<br>
attr()- 设置或返回元素的属性<br>
append() - 在被选元素的结尾插入内容<br>
prepend() - 在被选元素的开头插入内容<br>
after() - 在被选元素之后插入内容<br>
before() - 在被选元素之前插入内容</p>
<p>remove(agr) - 删除被选元素（及其子元素） agr支持过滤元素，选择器<br>
empty() - 从被选元素中删除子元素</p>
<p>addClass() - 向被选元素添加一个或多个类<br>
removeClass() - 从被选元素删除一个或多个类<br>
toggleClass() - 对被选元素进行添加/删除类的切换操作<br>
css() - 设置或返回样式属性</p>
<p>width()		方法设置或返回元素的宽度（不包括内边距、边框或外边距）<br>
height()		方法设置或返回元素的高度（不包括内边距、边框或外边距）<br>
innerWidth()	方法返回元素的宽度（包括内边距）<br>
innerHeight()	方法返回元素的高度（包括内边距）<br>
outerWidth() 	方法返回元素的宽度（包括内边距和边框）<br>
outerHeight()	 方法返回元素的高度（包括内边距和边框）</p>
<h2 id="遍历">遍历</h2>
<h3 id="祖先">祖先</h3>
<p>parent()		直接上级祖先<br>
parents('div')	所有祖先，支持过滤</p>
<h3 id="后代">后代</h3>
<p>parentsUntil('div')	当前与div之间的所有祖先元素	<br>
children()		支持过滤<br>
find(*)		*时表示返回所有后代</p>
<h3 id="同胞">同胞</h3>
<p>siblings()		所有同胞，支持过滤<br>
next()		下一个同胞<br>
nextAll()		下面的所有同胞<br>
nextUntil(&quot;h6&quot;)	返回当前与之间的所有同胞<br>
prev()		前一个同胞<br>
prevAll()		前面的所有同胞</p>
<h3 id="过滤">过滤</h3>
<p>返回多个元素时的过滤<br>
first()		第一个元素<br>
lase()		最后一个元素<br>
eq()		索引<br>
filter()		过滤<br>
not()		与上面相反的过滤<br>
prevUntil()	返回当前与前面的所有同胞</p>
<h2 id="ajax">ajax</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">.</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>(</mo><mi>U</mi><mi>R</mi><mi>L</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">.get(URL,callback);
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span></span></span></span>.get(URL,function(data,status){});	get请求url 回调函数中，第一个参数为返回的数据，第二个为请求的状态<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">.</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>U</mi><mi>R</mi><mi>L</mi><mo separator="true">,</mo><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo separator="true">,</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>)</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">.post(URL,data,callback);
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">;</span></span></span></span>.post(URL,data,function(data,status){}); 	post请求url 回调函数中，参数为需要传到后台的数据，回调函数中，第一个为参数返回的数据，第二个为请求的状态</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FQA——Linux]]></title>
        <id>https://childlike2333.github.io/post/centos/</id>
        <link href="https://childlike2333.github.io/post/centos/">
        </link>
        <updated>2020-03-18T14:03:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="centos6安装docker">Centos6安装docker</h3>
<p>yum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm</p>
<h3 id="centos只下载不安装rpm包">Centos只下载不安装rpm包</h3>
<blockquote>
<p>yumdownloader<br>
sudo yum install yum-utils （工具包）<br>
sudo yumdownloader <package-name></p>
</blockquote>
<h3 id="centos安装ffmpeg">Centos安装ffmpeg</h3>
<ul>
<li>
<p>先安装yasm</p>
<blockquote>
<p>wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz<br>
tar -zxvf yasm-1.3.0.tar.gz<br>
cd yasm-1.3.0<br>
./configure<br>
make<br>
make install</p>
</blockquote>
</li>
<li>
<p>再安装ffmpeg：</p>
<blockquote>
<p>wget http://www.ffmpeg.org/releases/ffmpeg-3.1.tar.gz<br>
tar -zxvf ffmpeg-3.1.tar.gz<br>
cd ffmpeg-3.1<br>
./configure<br>
make<br>
make install</p>
</blockquote>
<h3 id="centos安装paramiko出错">Centos安装paramiko出错</h3>
<blockquote>
<p>'module' object has no attribute 'GSSException'</p>
</blockquote>
</li>
</ul>
<p>解决方法</p>
<blockquote>
<p>yum install python-paramiko</p>
</blockquote>
<h3 id="iptables流量统计">iptables流量统计</h3>
<p>OUTPUT是出网流量，-s表示源 -d表示目的地 -p指定端口</p>
<blockquote>
<p>iptables -I OUTPUT -s 10.8.228.193 -d 10.8.228.191 -p udp</p>
</blockquote>
<p>INPUT是入网流量，-s表示源 -d表示目的地</p>
<blockquote>
<p>iptables -I INPUT -d 10.8.228.193 -s 10.8.228.191 -p udp</p>
</blockquote>
<p>查看当前的流量</p>
<blockquote>
<p>iptables -n -v -L -t filter</p>
</blockquote>
<p>删除INPUT的第一条</p>
<blockquote>
<p>iptables -D INPUT 1</p>
</blockquote>
<h3 id="linux下安装pip">linux下安装pip</h3>
<p>$ wget https://bootstrap.pypa.io/get-pip.py<br>
$ python get-pip.py<br>
$ pip -V</p>
<h3 id="linux出现name-or-service-not-known">linux出现Name-or-service-not-known</h3>
<p>linux出现 gaierror: [Errno -2] Name or service not known:<br>
/etc/hosts/ 中没有 127.0.0.1 localhost</p>
<h3 id="linux创建普通用户">linux创建普通用户</h3>
<pre><code>useradd ordinary    (ordinary为普通用户名)
passwd ordinary     (给这个用户设置密码)
</code></pre>
<h3 id="linux升级python后yum无法使用">linux升级python后yum无法使用</h3>
<p>问题：升级python后yum无法使用<br>
No module named yum<br>
方法：<br>
nano /usr/bin/yum   将前面的 /usr/bin/python 改为python2.6<br>
原因：<br>
安装了两个版本的python，yum和python之间有关联，需要将yum的引用python修改为旧python</p>
<h3 id="linux升级python后执行python失败问题">linux升级python后执行python失败问题</h3>
<blockquote>
<p>/usr/bin/python: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</p>
</blockquote>
<p>解决方法：</p>
<blockquote>
<p>export LD_LIBRARY_PATH=&quot;/usr/local/Python2.7/lib&quot;</p>
</blockquote>
<h3 id="linux后台运行脚本">linux后台运行脚本</h3>
<p>只输出错误信息到日志</p>
<blockquote>
<p>nohup ./program &gt;/dev/null 2&gt;log &amp;</p>
</blockquote>
<p>什么信息也不要</p>
<blockquote>
<p>nohup ./program &gt;/dev/null 2&gt;&amp;1 &amp;</p>
</blockquote>
<h3 id="linux回收cache">linux回收cache</h3>
<p>cache使用过大时回收</p>
<pre><code>echo 1 &gt; /proc/sys/vm/drop_caches:表示清除pagecache。
echo 2 &gt; /proc/sys/vm/drop_caches:表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。
echo 3 &gt; /proc/sys/vm/drop_caches:表示清除pagecache和slab分配器中的缓存对象。
</code></pre>
<h3 id="linux检查端口连通性">linux检查端口连通性</h3>
<p>TCP</p>
<blockquote>
<p>监听端口 nc -l 1080</p>
<p>连接端口 nc 1080</p>
</blockquote>
<p>udp</p>
<blockquote>
<p>linux下 监听端口 nc -ul 1080</p>
<p>给端口发送数据  nc -u x.x.x.x 1080</p>
</blockquote>
<h3 id="linux添加可执行文件到系统目录">linux添加可执行文件到系统目录</h3>
<p>可执行文件添加到系统目录：<br>
通过修改.bashrc文件:<br>
vim ~/.bashrc<br>
在最后一行添上：<br>
export PATH=/usr/local/bin:$PATH<br>
生效方法：（有以下两种）<br>
1、关闭当前终端窗口，重新打开一个新终端窗口就能生效<br>
2、输入“source ~/.bashrc”命令，立即生效</p>
<h3 id="linux给网卡添加ip">linux给网卡添加ip</h3>
<p>ip addr add 10.8.61.209/24 dev eth1 label eth1:0</p>
<h3 id="linux设置依赖库">linux设置依赖库</h3>
<ul>
<li>
<p>在/etc/ld.so.conf添加动态库的路径</p>
<blockquote>
<p>/home/quic/ffplay</p>
</blockquote>
</li>
<li>
<p>配置生效ldconfig</p>
</li>
</ul>
<h3 id="linux设置网卡丢包率">linux设置网卡丢包率</h3>
<p>增加20%的丢包</p>
<blockquote>
<p>tc qdisc add dev eth0 root netem loss 20%</p>
</blockquote>
<p>删除丢包设置</p>
<blockquote>
<p>tc qdisc del dev eth0 root netem loss 20%</p>
</blockquote>
<h3 id="nano用法">Nano用法</h3>
<p>Ctrl + O	保存<br>
Alt + 6	复制一整行<br>
Ctrl + K	剪切一整行<br>
Ctrl + U	粘贴<br>
Ctrl + Y	翻到上一页<br>
Ctrl + V	翻到下一页</p>
<h3 id="安装python-devel后依然提示未安装">安装python-devel后依然提示未安装</h3>
<ul>
<li>
<p>重新编译python</p>
<blockquote>
<p>./configure --prefix=/usr/local --enable-shared<br>
make &amp;&amp; make altinstall</p>
</blockquote>
</li>
<li>
<p>在 ~/.bash_profile 中添加 export</p>
<blockquote>
<p>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</p>
</blockquote>
</li>
</ul>
<h3 id="设置ip访问白名单">设置ip访问白名单</h3>
<p>设置ip访问白名单：  /etc/hosts.allow</p>
<pre><code class="language-shell">sshd: 10.8.151.171:allow
</code></pre>
<h3 id="设置curl连接持续时间">设置curl连接持续时间</h3>
<p>设置curl 连接超时时间10s，连接持续时间20s</p>
<blockquote>
<p>curl --connect-timeout 10 -m 20 &quot;http://XXXXXXX&quot;</p>
</blockquote>
<h3 id="设置ffmpeg持续时间">设置ffmpeg持续时间</h3>
<blockquote>
<p>ffmpeg -i rtmp://xxxx -c copy -t 10 rtmp1.flv</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于模型的测试（MBT）探索]]></title>
        <id>https://childlike2333.github.io/post/ji-yu-mo-xing-de-ce-shi-mbttan-suo/</id>
        <link href="https://childlike2333.github.io/post/ji-yu-mo-xing-de-ce-shi-mbttan-suo/">
        </link>
        <updated>2020-03-15T08:12:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mbt概述">MBT概述</h1>
<h2 id="基本概念">基本概念</h2>
<p>无论是软件还是硬件，甚至在日常生活中，所有的测试都可以视为系统因某个激励产生响应，然后对其进行检查的过程。在基于模型的测试中，我们认为模型在某种程度上就是激励-响应的一种表达方式。          关于模型，软件和系统设计模型通常包含两种类型——针对结构的模型和针对行为的模型。在通用建模语言UML中，针对结构的模型集中于类、类的属性、方法和类之间的连接，类似继承、聚合等关系。而对于测试人员而言，这类涉及到函数底层的架构并没有太多的价值。我们重点需要关注的是针对行为的模型。<br>
我们需要将被测试系统，抽象为一个一个基于行为的模型，拓展并优化这些模型，用以支持基于模型的测试。所以在MBT中有一个不可避免的局限性，只有原生模型足够好，派生出来的测试用例才能够同样好。</p>
<h2 id="mbt的形式">MBT的形式</h2>
<p>基于模型测试的过程有三种基本形式：</p>
<ul>
<li>手动测试</li>
<li>半自动测试</li>
<li>全自动测试</li>
</ul>
<p>在手动测试中，我们构建并分析被测系统（SUT）的模型，是为了测试设计用例。对SUT进行建模，识别并转换成测试用例。比如在一个状态机模型中，我们需要根据测试需求，选择哪些测试用例将予于执行。比如根据</p>
<ul>
<li>覆盖所有状态</li>
<li>覆盖所有变迁</li>
<li>覆盖所有路径</li>
</ul>
<p>这三种情况来进行用例选择。而手动测试和半自动化测试区别就在于，是否有工具来替我们挑选了满足我们需求的用例。而半自动化测试和全自动化测试的区别，就是是否有工具或者系统来帮我们将挑选出来的用例转换为自动化测试脚本，进行执行。</p>
<h2 id="mbt的作用">MBT的作用</h2>
<ul>
<li>测试人员了解并熟悉各类模型，将测试系统或者需求抽象成为符合预期的模型，利用这些模型进行测试用例设计，这同样也是一种高级测试用例设计方法。</li>
<li>当有一套完整且优秀的MBT测试方案后，测试人员只需要专注于被测系统的了解并抽象，MBT会帮助我们完成用例设计及报告数据。</li>
</ul>
<h1 id="常用的模型详解">常用的模型详解</h1>
<p>以直播项目的一个测试需求来作模型详解</p>
<h2 id="流程图">流程图</h2>
<p>计算机领域很早就开始使用流程图了，这可能是使用最早的一类行为模型。<br>
流程图中的路径可以直接推导出抽象的测试用例。<br>
对于流程图的优势，它是易于被理解的，过程框和决策框中的文本都可以使用自然语言。因此流程图使得客户和开发者之间具有更好的交互性。但流程图也有限制。由于流程图的本质是将过程序列化，所以很难表达事件驱动的系统。因为在事件驱动的系统中，独立事件可能以任意顺序发生。比如测试一个MP3、或者一个车库大门的驱动系统等。同时流程图几乎没有办法表达数据，只能作一些简单粗浅的表达，对于复杂系统的复杂数据交互，流程图模型是无法完成对系统的模型抽象的。</p>
<h2 id="决策表">决策表</h2>
<p>决策表是一种充分考虑系统之间的输入组合、约束以及输出因果关系的用例设计方法。<br>
特别适合于针对不同逻辑条件的组合，测试对象需要执行不同操作的场景。</p>
<h3 id="决策表的组成">决策表的组成</h3>
<p><img src="https://childlike2333.github.io/post-images/1584266588719.png" alt="" loading="lazy"><br>
条件桩： 列出系统的所有输入，通常认为列出的输入次序无关紧要<br>
动作桩： 列出系统所有可能执行的操作，这些执行操作没有顺序约束<br>
条件项： 列出输入项的各种取值<br>
动作项： 列出输入项的各种取值情况下应该采取的动作</p>
<h3 id="决策表的步骤">决策表的步骤</h3>
<ul>
<li>列出所有的条件桩和动作桩</li>
<li>确定规则的数目</li>
<li>填入条件项和动作项得到初始的决策表</li>
<li>简化相似的规则，得到优化的决策表</li>
<li>每列规则，设计一个测试用例</li>
</ul>
<h3 id="示例">示例</h3>
<p>公司规定如下：</p>
<ul>
<li>中国去欧美的航线所有座位都有食物供应。每个座位都可以播放电影</li>
<li>中国去非欧美的国外航线都有食物供应，只有商务仓可以播放电影</li>
<li>中国国内的航班的商务仓有食物供应，但是不可以播放电影</li>
<li>中国国内的航班的经济仓除非飞行时间大于2小时就有食物供应，但是不可以播放电影</li>
</ul>
<h4 id="列出所有的条件桩和动作桩">列出所有的条件桩和动作桩</h4>
<ol>
<li>列出所有的条件桩和动作桩<br>
等价类：<br>
A1={航线为国外欧美航线}<br>
A2={航线为国外非欧美航线}<br>
A3={航线为国内航线}<br>
P1={舱位为经济舱}<br>
P2={舱位为商务舱}<br>
T1={飞行时间大于2小时}<br>
T2={飞行时间不大于2小时}<br>
条件桩<br>
C1：航线为{A1,A2,A3}之一<br>
C2：舱位为{P1,P2}之一<br>
C3：飞行时间为{T1,T2}之一<br>
动作桩<br>
A1：食物供应<br>
A2：电影播放</li>
<li>确定规则的数目<br>
3x2x2=12</li>
<li>插入条件项和动作项得到初始的决策表<br>
<img src="https://childlike2333.github.io/post-images/1584266843538.png" alt="" loading="lazy"></li>
<li>简化相似的规则，得到优化的决策表<br>
<img src="https://childlike2333.github.io/post-images/1584266871731.png" alt="" loading="lazy"></li>
<li>每列规则，设计一个测试用例<br>
<img src="https://childlike2333.github.io/post-images/1584266899607.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
</feed>